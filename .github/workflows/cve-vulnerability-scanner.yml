name: CVE and Vulnerability Scanner

on:
  schedule:
    # يعمل يومياً في الساعة 2 صباحاً
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL or IP to scan'
        required: true
        default: 'https://example.com'
      scan_intensity:
        description: 'Scan intensity (light, normal, aggressive)'
        required: true
        default: 'normal'
        type: choice
        options:
          - light
          - normal
          - aggressive

env:
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  cve-vulnerability-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Security Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y nmap nikto wapiti sqlmap whatweb curl wget git
          
          # Install additional Python tools
          pip install requests beautifulsoup4 urllib3
          
          # Install Nuclei
          wget -q https://github.com/projectdiscovery/nuclei/releases/download/v3.1.0/nuclei_3.1.0_linux_amd64.zip
          unzip -o -q nuclei_3.1.0_linux_amd64.zip nuclei
          sudo mv nuclei /usr/local/bin/
          rm -f nuclei_3.1.0_linux_amd64.zip
          
          # Install Nmap Vulners script
          cd /usr/share/nmap/scripts/
          sudo wget https://raw.githubusercontent.com/vulnersCom/nmap-vulners/master/vulners.nse
          sudo nmap --script-updatedb

      - name: Create Results Directory
        run: mkdir -p cve-results

      - name: Extract Target Info
        id: target_info
        run: |
          TARGET="${{ github.event.inputs.target_url || 'https://example.com' }}"
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          
          # Extract domain/IP
          DOMAIN=$(echo "$TARGET" | awk -F[/:] '{print $4}')
          echo "DOMAIN=$DOMAIN" >> $GITHUB_ENV
          
          # Get IP address
          IP=$(dig +short "$DOMAIN" | head -1)
          echo "IP=$IP" >> $GITHUB_ENV
          echo "Target: $TARGET, Domain: $DOMAIN, IP: $IP"

      - name: Nmap Port Scan and Service Detection
        run: |
          echo "Starting Nmap Port Scan..." | tee -a cve-results/scan.log
          
          if [ "${{ github.event.inputs.scan_intensity }}" == "aggressive" ]; then
            sudo nmap -sV -sC -A -T4 -p- "$DOMAIN" -oN cve-results/nmap_full.txt || true
          elif [ "${{ github.event.inputs.scan_intensity }}" == "normal" ]; then
            sudo nmap -sV -sC -T3 -p 1-10000 "$DOMAIN" -oN cve-results/nmap_normal.txt || true
          else
            sudo nmap -sV -T2 -F "$DOMAIN" -oN cve-results/nmap_light.txt || true
          fi
          
          echo "Nmap scan completed" | tee -a cve-results/scan.log

      - name: Nmap Vulnerability Scan (Vulners)
        run: |
          echo "Starting Nmap Vulners CVE Scan..." | tee -a cve-results/scan.log
          sudo nmap -sV --script vulners "$DOMAIN" -oN cve-results/nmap_vulners.txt || true
          echo "Vulners scan completed" | tee -a cve-results/scan.log

      - name: Nmap NSE Vulnerability Scripts
        run: |
          echo "Running Nmap NSE vulnerability scripts..." | tee -a cve-results/scan.log
          sudo nmap --script vuln "$DOMAIN" -oN cve-results/nmap_vuln_scripts.txt || true
          echo "NSE vuln scripts completed" | tee -a cve-results/scan.log

      - name: Nikto Web Vulnerability Scanner
        run: |
          echo "Starting Nikto scan..." | tee -a cve-results/scan.log
          nikto -h "$TARGET" -output cve-results/nikto_results.txt -Format txt || true
          echo "Nikto scan completed" | tee -a cve-results/scan.log

      - name: WhatWeb Technology Detection
        run: |
          echo "Running WhatWeb..." | tee -a cve-results/scan.log
          whatweb -v -a 3 "$TARGET" | tee cve-results/whatweb_results.txt || true
          echo "WhatWeb completed" | tee -a cve-results/scan.log

      - name: Nuclei CVE Templates Scan
        run: |
          echo "Running Nuclei CVE templates..." | tee -a cve-results/scan.log
          nuclei -update-templates
          echo "$TARGET" | nuclei -t cves/ -severity critical,high,medium -o cve-results/nuclei_cves.txt || true
          echo "Nuclei CVE scan completed" | tee -a cve-results/scan.log

      - name: Nuclei Misconfiguration Scan
        run: |
          echo "Running Nuclei misconfiguration templates..." | tee -a cve-results/scan.log
          echo "$TARGET" | nuclei -t misconfiguration/ -t exposures/ -severity critical,high,medium -o cve-results/nuclei_misconfig.txt || true
          echo "Nuclei misconfiguration scan completed" | tee -a cve-results/scan.log

      - name: SSL/TLS Security Check
        run: |
          echo "Checking SSL/TLS security..." | tee -a cve-results/scan.log
          sudo nmap --script ssl-enum-ciphers -p 443 "$DOMAIN" -oN cve-results/ssl_check.txt || true
          sudo nmap --script ssl-cert,ssl-date,ssl-heartbleed "$DOMAIN" -oN cve-results/ssl_vulns.txt || true
          echo "SSL/TLS check completed" | tee -a cve-results/scan.log

      - name: HTTP Security Headers Check
        run: |
          echo "Checking HTTP security headers..." | tee -a cve-results/scan.log
          curl -I -s "$TARGET" > cve-results/http_headers.txt || true
          
          # Analyze headers
          echo "Security Headers Analysis:" | tee cve-results/headers_analysis.txt
          grep -i "X-Frame-Options" cve-results/http_headers.txt || echo "[MISSING] X-Frame-Options" | tee -a cve-results/headers_analysis.txt
          grep -i "Content-Security-Policy" cve-results/http_headers.txt || echo "[MISSING] Content-Security-Policy" | tee -a cve-results/headers_analysis.txt
          grep -i "Strict-Transport-Security" cve-results/http_headers.txt || echo "[MISSING] HSTS" | tee -a cve-results/headers_analysis.txt
          grep -i "X-Content-Type-Options" cve-results/http_headers.txt || echo "[MISSING] X-Content-Type-Options" | tee -a cve-results/headers_analysis.txt
          grep -i "X-XSS-Protection" cve-results/http_headers.txt || echo "[MISSING] X-XSS-Protection" | tee -a cve-results/headers_analysis.txt
          grep -i "Referrer-Policy" cve-results/http_headers.txt || echo "[MISSING] Referrer-Policy" | tee -a cve-results/headers_analysis.txt

      - name: WordPress Vulnerability Scan
        if: contains(steps.target_info.outputs.*, 'wordpress') || contains(steps.target_info.outputs.*, 'wp-')
        run: |
          echo "Detected WordPress, running WPScan..." | tee -a cve-results/scan.log
          docker run --rm wpscanteam/wpscan --url "$TARGET" --enumerate vp,vt,u --api-token ${{ secrets.WPSCAN_API_TOKEN }} > cve-results/wpscan_results.txt || true

      - name: DNS Security Check
        run: |
          echo "Running DNS security checks..." | tee -a cve-results/scan.log
          sudo nmap --script dns-zone-transfer,dns-recursion "$DOMAIN" -oN cve-results/dns_security.txt || true
          dig ANY "$DOMAIN" | tee cve-results/dns_records.txt || true

      - name: Subdomain Takeover Check
        run: |
          echo "Checking for subdomain takeover..." | tee -a cve-results/scan.log
          echo "$TARGET" | nuclei -t takeovers/ -o cve-results/takeover_check.txt || true

      - name: Generate CVE Report
        run: |
          echo "<b>CVE and Vulnerability Scan Report</b>" > cve-results/report.txt
          echo "<b>Date:</b> $(date)" >> cve-results/report.txt
          echo "<b>Target:</b> $TARGET" >> cve-results/report.txt
          echo "<b>Domain:</b> $DOMAIN" >> cve-results/report.txt
          echo "<b>IP:</b> $IP" >> cve-results/report.txt
          echo "" >> cve-results/report.txt
          
          # Nmap Vulners CVEs
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> cve-results/report.txt
          echo "<b>Nmap Vulners CVE Findings:</b>" >> cve-results/report.txt
          if [ -f "cve-results/nmap_vulners.txt" ] && [ -s "cve-results/nmap_vulners.txt" ]; then
            grep -E "(CVE-|EXPLOIT-DB)" cve-results/nmap_vulners.txt | head -30 >> cve-results/report.txt || echo "No CVEs found" >> cve-results/report.txt
          else
            echo "No CVEs found" >> cve-results/report.txt
          fi
          
          # Nikto Findings
          echo "" >> cve-results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> cve-results/report.txt
          echo "<b>Nikto Vulnerability Findings:</b>" >> cve-results/report.txt
          if [ -f "cve-results/nikto_results.txt" ] && [ -s "cve-results/nikto_results.txt" ]; then
            grep -E "(\+|OSVDB)" cve-results/nikto_results.txt | head -30 >> cve-results/report.txt || echo "No vulnerabilities found" >> cve-results/report.txt
          else
            echo "No vulnerabilities found" >> cve-results/report.txt
          fi
          
          # Nuclei CVEs
          echo "" >> cve-results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> cve-results/report.txt
          echo "<b>Nuclei CVE Findings:</b>" >> cve-results/report.txt
          if [ -f "cve-results/nuclei_cves.txt" ] && [ -s "cve-results/nuclei_cves.txt" ]; then
            head -30 cve-results/nuclei_cves.txt >> cve-results/report.txt
          else
            echo "No CVEs found" >> cve-results/report.txt
          fi
          
          # SSL/TLS Issues
          echo "" >> cve-results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> cve-results/report.txt
          echo "<b>SSL/TLS Security Issues:</b>" >> cve-results/report.txt
          if [ -f "cve-results/ssl_vulns.txt" ] && [ -s "cve-results/ssl_vulns.txt" ]; then
            grep -E "(VULNERABLE|WARNING)" cve-results/ssl_vulns.txt | head -20 >> cve-results/report.txt || echo "No SSL/TLS issues found" >> cve-results/report.txt
          else
            echo "No SSL/TLS issues found" >> cve-results/report.txt
          fi
          
          # Security Headers
          echo "" >> cve-results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> cve-results/report.txt
          echo "<b>Missing Security Headers:</b>" >> cve-results/report.txt
          if [ -f "cve-results/headers_analysis.txt" ]; then
            cat cve-results/headers_analysis.txt >> cve-results/report.txt
          fi
          
          # Open Ports
          echo "" >> cve-results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> cve-results/report.txt
          echo "<b>Open Ports and Services:</b>" >> cve-results/report.txt
          if [ -f "cve-results/nmap_normal.txt" ]; then
            grep -E "^[0-9]+/tcp" cve-results/nmap_normal.txt | head -20 >> cve-results/report.txt
          elif [ -f "cve-results/nmap_light.txt" ]; then
            grep -E "^[0-9]+/tcp" cve-results/nmap_light.txt | head -20 >> cve-results/report.txt
          fi
          
          echo "" >> cve-results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> cve-results/report.txt
          echo "Full results available in artifacts" >> cve-results/report.txt

      - name: Send Telegram Notification
        if: env.TELEGRAM_TOKEN != ''
        run: |
          # Send summary
          SUMMARY="<b>CVE Vulnerability Scan Completed</b>%0A"
          SUMMARY+="<b>Date:</b> $(date)%0A"
          SUMMARY+="<b>Target:</b> $TARGET%0A"
          SUMMARY+="<b>IP:</b> $IP%0A%0A"
          
          # Count findings
          CVE_COUNT=$(grep -c "CVE-" cve-results/nmap_vulners.txt 2>/dev/null || echo 0)
          NIKTO_COUNT=$(grep -c "OSVDB" cve-results/nikto_results.txt 2>/dev/null || echo 0)
          NUCLEI_COUNT=$(wc -l < cve-results/nuclei_cves.txt 2>/dev/null || echo 0)
          PORTS_COUNT=$(grep -c "^[0-9]*/tcp.*open" cve-results/nmap_*.txt 2>/dev/null || echo 0)
          
          SUMMARY+="<b>Findings Summary:</b>%0A"
          SUMMARY+="- CVEs Found: ${CVE_COUNT}%0A"
          SUMMARY+="- Nikto Issues: ${NIKTO_COUNT}%0A"
          SUMMARY+="- Nuclei CVEs: ${NUCLEI_COUNT}%0A"
          SUMMARY+="- Open Ports: ${PORTS_COUNT}%0A"
          
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d "chat_id=${TELEGRAM_CHAT_ID}" \
            -d "text=${SUMMARY}" \
            -d "parse_mode=HTML" || echo "Failed to send summary"
          
          # Send detailed report in chunks
          if [ -s cve-results/report.txt ]; then
            split -b 3500 cve-results/report.txt cve-results/report_chunk_
            for chunk in cve-results/report_chunk_*; do
              CHUNK_DATA=$(cat "$chunk" | sed 's/&/%26/g' | sed 's/+/%2B/g')
              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
                -d "chat_id=${TELEGRAM_CHAT_ID}" \
                -d "text=${CHUNK_DATA}" \
                -d "parse_mode=HTML" || echo "Failed to send chunk"
              sleep 1
            done
          fi

      - name: Upload CVE Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cve-scan-results
          path: cve-results/
          retention-days: 30

      - name: Commit Results to Repository
        if: github.event_name == 'schedule'
        run: |
          git config --global user.name "CVE Scanner Bot"
          git config --global user.email "cve-bot@scanner.local"
          git add cve-results/ || true
          git commit -m "CVE scan results - $(date)" || true
          git push || true
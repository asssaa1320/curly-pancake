name: Bug Bounty Automation

on:
  schedule:
    # يعمل كل 6 ساعات
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to scan'
        required: true
        default: 'https://example.com'
      scan_type:
        description: 'Scan type (api, file-disclosure, all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - file-disclosure

env:
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  bug-bounty-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl git
          pip install requests beautifulsoup4 urllib3 colorama

      - name: Install Security Tools
        run: |
          # Install subfinder for subdomain enumeration
          wget -q https://github.com/projectdiscovery/subfinder/releases/download/v2.6.3/subfinder_2.6.3_linux_amd64.zip
          unzip -o -q subfinder_2.6.3_linux_amd64.zip subfinder
          sudo mv subfinder /usr/local/bin/
          rm -f subfinder_2.6.3_linux_amd64.zip
          
          # Install httpx for probing
          wget -q https://github.com/projectdiscovery/httpx/releases/download/v1.3.7/httpx_1.3.7_linux_amd64.zip
          unzip -o -q httpx_1.3.7_linux_amd64.zip httpx
          sudo mv httpx /usr/local/bin/
          rm -f httpx_1.3.7_linux_amd64.zip
          
          # Install nuclei for vulnerability scanning
          wget -q https://github.com/projectdiscovery/nuclei/releases/download/v3.1.0/nuclei_3.1.0_linux_amd64.zip
          unzip -o -q nuclei_3.1.0_linux_amd64.zip nuclei
          sudo mv nuclei /usr/local/bin/
          rm -f nuclei_3.1.0_linux_amd64.zip

      - name: Create Results Directory
        run: mkdir -p results

      - name: Read Targets from File
        id: read_targets
        run: |
          if [ -f "targets.txt" ]; then
            echo "TARGET_LIST=$(cat targets.txt | tr '\n' ' ')" >> $GITHUB_ENV
          else
            echo "TARGET_LIST=${{ github.event.inputs.target_url || 'https://example.com' }}" >> $GITHUB_ENV
          fi

      - name: API Discovery Scan
        if: github.event.inputs.scan_type == 'api' || github.event.inputs.scan_type == 'all' || github.event_name == 'schedule'
        run: |
          echo "Starting API Discovery Scan..." | tee -a results/report.txt
          python scripts/api_scanner.py "$TARGET_LIST" | tee -a results/api_results.txt

      - name: File Disclosure Scan
        if: github.event.inputs.scan_type == 'file-disclosure' || github.event.inputs.scan_type == 'all' || github.event_name == 'schedule'
        run: |
          echo "Starting File Disclosure Scan..." | tee -a results/report.txt
          python scripts/file_disclosure_scanner.py "$TARGET_LIST" | tee -a results/file_disclosure_results.txt

      - name: API Keys and Secrets Scan
        if: github.event.inputs.scan_type == 'api' || github.event.inputs.scan_type == 'all' || github.event_name == 'schedule'
        run: |
          echo "Starting API Keys and Secrets Scan..." | tee -a results/report.txt
          echo "$TARGET_LIST" | tr ' ' '\n' | while read -r URL; do
            echo "Scanning: $URL" | tee -a results/secrets_results.txt
            curl --retry 2 --connect-timeout 8 -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" -s "$URL" | \
            grep -E -o '((?<=/)[a-zA-Z0-9\-_\/.:]+(?=/)|[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}|(passw(or)?d|key|secret|token|api[_-]?key|access[_-]?token)\s*[:=]\s*["'\'''][^"'\'']+["'\''])' | \
            sort -u | tee -a results/secrets_results.txt || true
          done

      - name: JavaScript Files Analysis
        if: github.event.inputs.scan_type == 'api' || github.event.inputs.scan_type == 'all' || github.event_name == 'schedule'
        run: |
          echo "Starting JavaScript Files Analysis..." | tee -a results/report.txt
          echo "$TARGET_LIST" | tr ' ' '\n' | while read -r URL; do
            echo "Analyzing JS files from: $URL" | tee -a results/js_analysis_results.txt
            curl -s --max-time 8 "$URL" | grep -oE 'src=["'\''](.*?\.js)["'\'']' | cut -d'"' -f2 | sort -u | while read -r js_file; do
              [[ $js_file != http* ]] && js_file="$URL$js_file"
              echo "Checking: $js_file" | tee -a results/js_analysis_results.txt
              curl -s --max-time 8 "$js_file" | grep -E -o '(api|token|key|json\.txt)' && echo "[!] Possible API key in: $js_file" | tee -a results/js_analysis_results.txt || true
            done
          done

      - name: Sensitive Paths Scanner
        if: github.event.inputs.scan_type == 'file-disclosure' || github.event.inputs.scan_type == 'all' || github.event_name == 'schedule'
        run: |
          echo "Starting Sensitive Paths Scanner..." | tee -a results/report.txt
          SENSITIVE_PATHS=(
            "/.env" "/.git/config" "/config.php" "/wp-config.php"
            "/admin" "/login" "/dashboard" "/api/v1" "/api/v2"
            "/phpinfo.php" "/info.php" "/test.php" "/.aws/credentials"
            "/backup.sql" "/dump.sql" "/database.sql" "/.htaccess"
            "/web.config" "/composer.json" "/package.json" "/.ssh/id_rsa"
            "/robots.txt" "/sitemap.xml" "/.well-known/security.txt"
            "/swagger.json" "/api-docs" "/graphql" "/console"
            "/actuator" "/health" "/metrics" "/debug"
          )
          echo "$TARGET_LIST" | tr ' ' '\n' | while read -r URL; do
            echo "Scanning sensitive paths on: $URL" | tee -a results/sensitive_paths.txt
            for path in "${SENSITIVE_PATHS[@]}"; do
              FULL_URL="${URL}${path}"
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 3 --max-time 5 "$FULL_URL" 2>/dev/null || echo "000")
              if [[ "$STATUS" =~ ^(200|201|301|302|401|403)$ ]]; then
                echo "[${STATUS}] ${FULL_URL}" | tee -a results/sensitive_paths.txt
              fi
            done
          done || true

      - name: Nuclei Vulnerability Scan
        run: |
          echo "Running Nuclei Scan..." | tee -a results/report.txt
          nuclei -update-templates
          echo "$TARGET_LIST" | tr ' ' '\n' > targets_temp.txt
          nuclei -l targets_temp.txt -t exposures/ -t vulnerabilities/ -severity critical,high,medium -o results/nuclei_results.txt || true

      - name: Generate Report
        run: |
          echo "<b>Bug Bounty Automation Report</b>" > results/report.txt
          echo "<b>Date:</b> $(date)" >> results/report.txt
          echo "<b>Targets:</b> $TARGET_LIST" >> results/report.txt
          echo "" >> results/report.txt
          
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> results/report.txt
          echo "<b>API Discovery Results:</b>" >> results/report.txt
          if [ -f "results/api_results.txt" ] && [ -s "results/api_results.txt" ]; then
            head -50 results/api_results.txt >> results/report.txt
          else
            echo "No API endpoints found" >> results/report.txt
          fi
          
          echo "" >> results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> results/report.txt
          echo "<b>Sensitive Paths Results:</b>" >> results/report.txt
          if [ -f "results/sensitive_paths.txt" ] && [ -s "results/sensitive_paths.txt" ]; then
            head -50 results/sensitive_paths.txt >> results/report.txt
          else
            echo "No sensitive paths found" >> results/report.txt
          fi
          
          echo "" >> results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> results/report.txt
          echo "<b>API Keys and Secrets:</b>" >> results/report.txt
          if [ -f "results/secrets_results.txt" ] && [ -s "results/secrets_results.txt" ]; then
            head -30 results/secrets_results.txt >> results/report.txt
          else
            echo "No secrets found" >> results/report.txt
          fi
          
          echo "" >> results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> results/report.txt
          echo "<b>JavaScript Analysis:</b>" >> results/report.txt
          if [ -f "results/js_analysis_results.txt" ] && [ -s "results/js_analysis_results.txt" ]; then
            head -30 results/js_analysis_results.txt >> results/report.txt
          else
            echo "No JS issues found" >> results/report.txt
          fi
          
          echo "" >> results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> results/report.txt
          echo "<b>File Disclosure Results:</b>" >> results/report.txt
          if [ -f "results/file_disclosure_results.txt" ] && [ -s "results/file_disclosure_results.txt" ]; then
            head -30 results/file_disclosure_results.txt >> results/report.txt
          else
            echo "No file disclosure vulnerabilities found" >> results/report.txt
          fi
          
          echo "" >> results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> results/report.txt
          echo "<b>Nuclei Scan Results:</b>" >> results/report.txt
          if [ -f "results/nuclei_results.txt" ] && [ -s "results/nuclei_results.txt" ]; then
            head -30 results/nuclei_results.txt >> results/report.txt
          else
            echo "No vulnerabilities found by Nuclei" >> results/report.txt
          fi
          
          echo "" >> results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> results/report.txt
          echo "Full results available in artifacts" >> results/report.txt

      - name: Send Telegram Notification
        if: env.TELEGRAM_TOKEN != ''
        run: |
          # Split report into chunks to avoid Telegram message size limit (4096 chars)
          REPORT=$(cat results/report.txt)
          
          # Send summary first
          SUMMARY="<b>Bug Bounty Scan Completed</b>%0A"
          SUMMARY+="<b>Date:</b> $(date)%0A"
          SUMMARY+="<b>Targets:</b> $TARGET_LIST%0A%0A"
          
          # Count results
          API_COUNT=$([ -f results/api_results.txt ] && wc -l < results/api_results.txt || echo 0)
          PATHS_COUNT=$([ -f results/sensitive_paths.txt ] && wc -l < results/sensitive_paths.txt || echo 0)
          SECRETS_COUNT=$([ -f results/secrets_results.txt ] && wc -l < results/secrets_results.txt || echo 0)
          JS_COUNT=$([ -f results/js_analysis_results.txt ] && wc -l < results/js_analysis_results.txt || echo 0)
          NUCLEI_COUNT=$([ -f results/nuclei_results.txt ] && wc -l < results/nuclei_results.txt || echo 0)
          
          SUMMARY+="<b>Results Summary:</b>%0A"
          SUMMARY+="- API Endpoints: ${API_COUNT}%0A"
          SUMMARY+="- Sensitive Paths: ${PATHS_COUNT}%0A"
          SUMMARY+="- Secrets Found: ${SECRETS_COUNT}%0A"
          SUMMARY+="- JS Issues: ${JS_COUNT}%0A"
          SUMMARY+="- Nuclei Findings: ${NUCLEI_COUNT}%0A"
          
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d "chat_id=${TELEGRAM_CHAT_ID}" \
            -d "text=${SUMMARY}" \
            -d "parse_mode=HTML" || echo "Failed to send summary"
          
          # Send detailed results in chunks
          if [ -s results/report.txt ]; then
            split -b 3500 results/report.txt results/report_chunk_
            for chunk in results/report_chunk_*; do
              CHUNK_DATA=$(cat "$chunk" | sed 's/&/%26/g' | sed 's/+/%2B/g')
              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
                -d "chat_id=${TELEGRAM_CHAT_ID}" \
                -d "text=${CHUNK_DATA}" \
                -d "parse_mode=HTML" || echo "Failed to send chunk"
              sleep 1
            done
          fi

      - name: Upload Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bug-bounty-results
          path: results/
          retention-days: 30

      - name: Commit Results to Repository
        if: github.event_name == 'schedule'
        run: |
          git config --global user.name "Bug Bounty Bot"
          git config --global user.email "bot@bugbounty.local"
          git add results/ || true
          git commit -m "Automated scan results - $(date)" || true
          git push || true

name: Bug Bounty Automation

on:
  schedule:
    # يعمل كل 6 ساعات
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to scan'
        required: true
        default: 'https://example.com'
      scan_type:
        description: 'Scan type (api, file-disclosure, all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - file-disclosure

env:
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  bug-bounty-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl git
          pip install requests beautifulsoup4 urllib3 colorama

      - name: Install Security Tools
        run: |
          # Install subfinder for subdomain enumeration
          wget -q https://github.com/projectdiscovery/subfinder/releases/download/v2.6.3/subfinder_2.6.3_linux_amd64.zip
          unzip -q subfinder_2.6.3_linux_amd64.zip
          sudo mv subfinder /usr/local/bin/
          
          # Install httpx for probing
          wget -q https://github.com/projectdiscovery/httpx/releases/download/v1.3.7/httpx_1.3.7_linux_amd64.zip
          unzip -q httpx_1.3.7_linux_amd64.zip
          sudo mv httpx /usr/local/bin/
          
          # Install nuclei for vulnerability scanning
          wget -q https://github.com/projectdiscovery/nuclei/releases/download/v3.1.0/nuclei_3.1.0_linux_amd64.zip
          unzip -q nuclei_3.1.0_linux_amd64.zip
          sudo mv nuclei /usr/local/bin/

      - name: Create Results Directory
        run: mkdir -p results

      - name: Read Targets from File
        id: read_targets
        run: |
          if [ -f "targets.txt" ]; then
            echo "TARGET_LIST=$(cat targets.txt | tr '\n' ' ')" >> $GITHUB_ENV
          else
            echo "TARGET_LIST=${{ github.event.inputs.target_url || 'https://example.com' }}" >> $GITHUB_ENV
          fi

      - name: API Discovery Scan
        if: github.event.inputs.scan_type == 'api' || github.event.inputs.scan_type == 'all' || github.event_name == 'schedule'
        run: |
          echo "Starting API Discovery Scan..." | tee -a results/report.txt
          python scripts/api_scanner.py "$TARGET_LIST" | tee -a results/api_results.txt

      - name: File Disclosure Scan
        if: github.event.inputs.scan_type == 'file-disclosure' || github.event.inputs.scan_type == 'all' || github.event_name == 'schedule'
        run: |
          echo "Starting File Disclosure Scan..." | tee -a results/report.txt
          python scripts/file_disclosure_scanner.py "$TARGET_LIST" | tee -a results/file_disclosure_results.txt

      - name: Nuclei Vulnerability Scan
        run: |
          echo "Running Nuclei Scan..." | tee -a results/report.txt
          nuclei -update-templates
          echo "$TARGET_LIST" | tr ' ' '\n' > targets_temp.txt
          nuclei -l targets_temp.txt -t exposures/ -t vulnerabilities/ -severity critical,high,medium -o results/nuclei_results.txt || true

      - name: Generate Report
        run: |
          echo "<b>Bug Bounty Automation Report</b>" > results/report.txt
          echo "<b>Date:</b> $(date)" >> results/report.txt
          echo "<b>Targets:</b> $TARGET_LIST" >> results/report.txt
          echo "" >> results/report.txt
          
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> results/report.txt
          echo "<b>API Discovery Results:</b>" >> results/report.txt
          if [ -f "results/api_results.txt" ]; then
            cat results/api_results.txt >> results/report.txt
          else
            echo "No API endpoints found" >> results/report.txt
          fi
          
          echo "" >> results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> results/report.txt
          echo "<b>File Disclosure Results:</b>" >> results/report.txt
          if [ -f "results/file_disclosure_results.txt" ]; then
            cat results/file_disclosure_results.txt >> results/report.txt
          else
            echo "No file disclosure vulnerabilities found" >> results/report.txt
          fi
          
          echo "" >> results/report.txt
          echo "<b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━</b>" >> results/report.txt
          echo "<b>Nuclei Scan Results:</b>" >> results/report.txt
          if [ -f "results/nuclei_results.txt" ]; then
            cat results/nuclei_results.txt >> results/report.txt
          else
            echo "No vulnerabilities found by Nuclei" >> results/report.txt
          fi

      - name: Send Telegram Notification
        if: env.TELEGRAM_TOKEN != ''
        run: |
          REPORT=$(cat results/report.txt)
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d "chat_id=${TELEGRAM_CHAT_ID}" \
            -d "text=${REPORT}" \
            -d "parse_mode=HTML" || echo "Failed to send notification"

      - name: Upload Results as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: bug-bounty-results
          path: results/
          retention-days: 30

      - name: Commit Results to Repository
        if: github.event_name == 'schedule'
        run: |
          git config --global user.name "Bug Bounty Bot"
          git config --global user.email "bot@bugbounty.local"
          git add results/ || true
          git commit -m "Automated scan results - $(date)" || true
          git push || true
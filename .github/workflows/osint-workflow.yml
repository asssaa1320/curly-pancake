name: OSINT Intelligence

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target Domain'
        required: true
        default: 'example.com'

env:
  TELEGRAM_TOKEN: \${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: \${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  osint:
    name: OSINT Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Create Directories
        run: |
          mkdir -p osint/domains
          mkdir -p osint/emails
          mkdir -p osint/tech
          mkdir -p osint/certs
      
      - name: Install Tools
        run: |
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install -v github.com/tomnomnom/assetfinder@latest
          echo "\$HOME/go/bin" >> \$GITHUB_PATH
      
      - name: Subdomain Discovery
        run: |
          TARGET="\${{ github.event.inputs.target }}"
          echo "Scanning: \$TARGET"
          
          subfinder -d "\$TARGET" -all -silent -o osint/domains/subfinder.txt || echo "subfinder failed"
          assetfinder --subs-only "\$TARGET" > osint/domains/assetfinder.txt 2>/dev/null || echo "assetfinder failed"
          
          cat osint/domains/*.txt 2>/dev/null | sort -u > osint/domains/all_subdomains.txt || touch osint/domains/all_subdomains.txt
          
          COUNT=\$(wc -l < osint/domains/all_subdomains.txt 2>/dev/null || echo 0)
          echo "Found \$COUNT subdomains"
      
      - name: SSL Certificates
        run: |
          TARGET="\${{ github.event.inputs.target }}"
          curl -s "https://crt.sh/?q=%25.\$TARGET&output=json" 2>/dev/null | \\
            grep -oP '"name_value":"\\K[^"]+' | \\
            sort -u > osint/certs/crtsh.txt || touch osint/certs/crtsh.txt
          
          COUNT=\$(wc -l < osint/certs/crtsh.txt 2>/dev/null || echo 0)
          echo "Found \$COUNT certificate domains"
      
      - name: Live Hosts
        run: |
          if [ -s osint/domains/all_subdomains.txt ]; then
            cat osint/domains/all_subdomains.txt | \\
              httpx -silent -o osint/domains/live_hosts.txt || touch osint/domains/live_hosts.txt
            
            COUNT=\$(wc -l < osint/domains/live_hosts.txt 2>/dev/null || echo 0)
            echo "Found \$COUNT live hosts"
          else
            echo "No subdomains to check"
            touch osint/domains/live_hosts.txt
          fi
      
      - name: Technology Detection
        run: |
          if [ -s osint/domains/live_hosts.txt ]; then
            cat osint/domains/live_hosts.txt | \\
              httpx -silent -tech-detect -json -o osint/tech/tech.json || touch osint/tech/tech.json
          else
            echo "No live hosts for tech detection"
            touch osint/tech/tech.json
          fi
      
      - name: WHOIS Info
        run: |
          TARGET="\${{ github.event.inputs.target }}"
          whois "\$TARGET" > osint/domains/whois.txt 2>&1 || echo "WHOIS failed"
          
          grep -Eio '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}' osint/domains/whois.txt 2>/dev/null | \\
            sort -u > osint/emails/whois_emails.txt || touch osint/emails/whois_emails.txt
      
      - name: Generate Report
        run: |
          TARGET="\${{ github.event.inputs.target }}"
          
          echo "========================================" > osint/REPORT.txt
          echo "OSINT REPORT" >> osint/REPORT.txt
          echo "========================================" >> osint/REPORT.txt
          echo "" >> osint/REPORT.txt
          echo "Target: \$TARGET" >> osint/REPORT.txt
          echo "Date: \$(date)" >> osint/REPORT.txt
          echo "" >> osint/REPORT.txt
          echo "STATISTICS:" >> osint/REPORT.txt
          echo "- Subdomains: \$(wc -l < osint/domains/all_subdomains.txt 2>/dev/null || echo 0)" >> osint/REPORT.txt
          echo "- Live Hosts: \$(wc -l < osint/domains/live_hosts.txt 2>/dev/null || echo 0)" >> osint/REPORT.txt
          echo "- Certificates: \$(wc -l < osint/certs/crtsh.txt 2>/dev/null || echo 0)" >> osint/REPORT.txt
          echo "- Emails: \$(wc -l < osint/emails/whois_emails.txt 2>/dev/null || echo 0)" >> osint/REPORT.txt
          echo "" >> osint/REPORT.txt
          echo "TOP SUBDOMAINS:" >> osint/REPORT.txt
          head -n 10 osint/domains/all_subdomains.txt 2>/dev/null >> osint/REPORT.txt || echo "None" >> osint/REPORT.txt
          echo "" >> osint/REPORT.txt
          echo "EMAILS:" >> osint/REPORT.txt
          head -n 5 osint/emails/whois_emails.txt 2>/dev/null >> osint/REPORT.txt || echo "None" >> osint/REPORT.txt
          echo "========================================" >> osint/REPORT.txt
          
          cat osint/REPORT.txt
      
      - name: Send Telegram
        if: env.TELEGRAM_TOKEN != ''
        run: |
          REPORT=\$(cat osint/REPORT.txt)
          curl -s -X POST "https://api.telegram.org/bot\${TELEGRAM_TOKEN}/sendMessage" \\
            -d "chat_id=\${TELEGRAM_CHAT_ID}" \\
            -d "text=\${REPORT}" \\
            -d "parse_mode=HTML" || echo "Telegram notification failed"
      
      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: osint-results-\${{ github.event.inputs.target }}
          path: osint/
          retention-days: 30`
